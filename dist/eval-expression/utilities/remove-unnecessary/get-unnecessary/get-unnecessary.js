const change_container_true=(e,t)=>e=`${e.slice(0,t[0])}!${e.slice(t[0]+1,t[1])}@${e.slice(t[1]+1)}`,change_container_false=(e,t)=>e=`${e.slice(0,t[0])}#${e.slice(t[0]+1,t[1])}$${e.slice(t[1]+1)}`,hasItToRemove=e=>{let t=!1;return(/\{\}|\[\]|\(\)/.test(e.before_and_after)||/[([{\-+][^*/]/.test(e.before_and_after)&&!e.mult_and_div_inside||/[^/]./.test(e.before_and_after)&&!e.add_and_sub_inside)&&(t=!0),t},getUnnecessary=e=>{let t=/\{[^({[(}]*\}|\[[^({[(\]]*\]|\([^({[()]*\)/,n=/#[^(#)]*\$/,s=[],i=e;for(;t.test(i);){let e=i.match(t),a=[e.index,e.index+e[0].length-1],_=e[0];if(e[0]===i)return s.push(a[0]),s.push(a[1]),s;if(n.test(e[0])){let e=_.match(n);_=e.index>0?`${_.slice(0,e.index+1)}${_.slice(e.index+e[0].length)}`:`${_.slice(e.index+e[0].length)}`}let d=/[/*]|\d#/.test(_.slice(2)),l=/[-+]/.test(_.slice(2)),r="";r=0===a[0]?`(${i[a[1]+1]}`:a[1]===i.length-1?`${i[a[0]-1]})`:`${i[a[0]-1]}${i[a[1]+1]}`,hasItToRemove({expression_temp:i,before_and_after:r,mult_and_div_inside:d,add_and_sub_inside:l})?(i=change_container_true(i,a),s.push(a[0]),s.push(a[1])):i=change_container_false(i,a)}return s};module.exports=getUnnecessary;