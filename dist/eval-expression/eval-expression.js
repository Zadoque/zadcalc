const isValid=require("./utilities/is-valid/is-valid"),implicitMultiplication=require("./utilities/implicit-multiplication/implicit-multiplication"),removeUnnecessary=require("./utilities/remove-unnecessary/remove-unnecessary"),simplify=require("./utilities/simplify/simplify"),resolve=require("./utilities/resolve/resolve"),decimalToFrac=require("./utilities/decimal-to-frac/decimal-to-frac");let mathResolver={settings:{to_fixed:5,frac_mode:!1,positive_sign:!1,return_as_string:!0},evalExpression:e=>{if(e=e.toString(),mathResolver.settings.frac_mode&&!mathResolver.settings.return_as_string)return"Settings Error! frac mode just work when return_as_string is true";if(mathResolver.settings.positive_sign&&!mathResolver.settings.return_as_string)return"Settings Error! positve_sign just work when return as string is true";if(isValid(e)){if(/[{([]/.test(e)?(e=implicitMultiplication(e),e=removeUnnecessary(e),/[{([]/.test(e)?(e=simplify(e),e=resolve(e)):e=resolve(e)):e=resolve(e),"Error! division by zero"===e)return e;if(Number(e)!==Math.floor(Number(e)))if(mathResolver.settings.frac_mode)e=decimalToFrac(e);else{e.split(".")[1].length>mathResolver.settings.to_fixed&&(e=`${Number(e).toFixed(mathResolver.settings.to_fixed)}`)}return Number(e)>0&&"+"!==e[0]&&mathResolver.settings.positive_sign&&(e=`+${e}`),mathResolver.settings.positive_sign||"+"!==e[0]||(e=e.slice(1)),mathResolver.settings.return_as_string?e:Number(e)}return"Sintax Error"}};module.exports=mathResolver;